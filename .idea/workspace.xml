<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="d4b5e062-a02e-4479-bacb-337772834865" name="Changes" comment="Adicionar classe Analista em Java&#10;&#10;Este commit adiciona a classe Analista em Java, que estende a classe Funcionario e adiciona o atributo adicional &quot;area&quot;. O método calcularBonus() na classe Analista calcula o bônus com base na avaliação da área.&#10;&#10;Este exemplo serve como uma demonstração simples de como estender uma classe existente em Java e adicionar comportamentos específicos.&#10;&#10;Refs #2">
      <change beforePath="$PROJECT_DIR$/src/Assistente.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Assistente.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2MwG57r1WXJ0XvfQe9KKxyqt7Qr" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="ProjetoDio" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="8fde9a6d-f0e3-4883-bb38-5f61ae630ae4" name="Changes" comment="" />
      <created>1678671049497</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1678671049497</updated>
    </task>
    <task id="LOCAL-00001" summary="first commit">
      <created>1678671727217</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1678671727217</updated>
    </task>
    <task id="LOCAL-00002" summary="Criando classe Abstrata Funcionario">
      <created>1678672018628</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1678672018628</updated>
    </task>
    <task id="LOCAL-00003" summary="Classe filha Gerente, que herda atributos e métodos da classe Funcionario">
      <created>1678672134512</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1678672134512</updated>
    </task>
    <task id="LOCAL-00004" summary="Classe filha Analista, que herda atributos e métodos da classe Funcionario">
      <created>1678672180209</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1678672180209</updated>
    </task>
    <task id="LOCAL-00005" summary="Classe filha Assistente, que herda atributos e métodos da classe Funcionario">
      <created>1678672262270</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1678672262270</updated>
    </task>
    <task id="LOCAL-00006" summary="Retirando classe abstrata">
      <created>1678672572855</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1678672572855</updated>
    </task>
    <task id="LOCAL-00007" summary="Adicionar exemplo de classes e objetos com herança em Java&#10;&#10;Este commit adiciona um exemplo simples de uso de herança em Java. Três classes foram criadas para representar diferentes tipos de funcionários: Gerente, Assistente e Analista. A classe Funcionario é uma classe que define os atributos básicos que todos os funcionários compartilham. As outras três classes estendem a classe Funcionario e adicionam atributos específicos de cada tipo de funcionário.&#10;&#10;Cada uma das classes implementa o método calcularBonus() de maneira diferente, com base nas regras de bônus específicas para cada tipo de funcionário. O código na classe Main instancia objetos de cada uma das classes e imprime informações sobre o estado atual dos objetos, bem como o bônus que cada um receberá com base em sua classe específica.&#10;&#10;Este exemplo serve como uma introdução simples ao uso de herança em Java e como uma demonstração de como as classes podem ser usadas para modelar objetos do mundo real com atributos e comportamentos específicos.&#10;&#10;Refs #1">
      <created>1678673596529</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1678673596529</updated>
    </task>
    <task id="LOCAL-00008" summary="Adicionar classes de Funcionario e suas subclasses em Java&#10;&#10;Este commit adiciona quatro classes em Java para representar diferentes tipos de funcionários: Funcionario (abstrata), Gerente, Assistente e Analista. A classe Funcionario é uma classe abstrata que define os atributos básicos que todos os funcionários compartilham, como nome, salário e cargo. As outras três classes estendem a classe Funcionario e adicionam atributos específicos de cada tipo de funcionário.&#10;&#10;Cada uma das classes implementa o método calcularBonus() de maneira diferente, com base nas regras de bônus específicas para cada tipo de funcionário. Esses métodos são sobrescritos nas subclasses usando a anotação @Override.&#10;&#10;Este exemplo serve como uma introdução simples ao uso de herança em Java e como uma demonstração de como as classes podem ser usadas para modelar objetos do mundo real com atributos e comportamentos específicos.&#10;&#10;Refs #1">
      <created>1678674463479</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1678674463479</updated>
    </task>
    <task id="LOCAL-00009" summary="Adicionar classe Analista em Java&#10;&#10;Este commit adiciona a classe Analista em Java, que estende a classe Funcionario e adiciona o atributo adicional &quot;area&quot;. O método calcularBonus() na classe Analista calcula o bônus com base na avaliação da área.&#10;&#10;Este exemplo serve como uma demonstração simples de como estender uma classe existente em Java e adicionar comportamentos específicos.&#10;&#10;Refs #2">
      <created>1678674611551</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1678674611551</updated>
    </task>
    <option name="localTasksCounter" value="10" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="first commit" />
    <MESSAGE value="Criando classe Abstrata Funcionario" />
    <MESSAGE value="Classe filha Gerente, que herda atributos e métodos da classe Funcionario" />
    <MESSAGE value="Classe filha Analista, que herda atributos e métodos da classe Funcionario" />
    <MESSAGE value="Classe filha Assistente, que herda atributos e métodos da classe Funcionario" />
    <MESSAGE value="Retirando classe abstrata" />
    <MESSAGE value="Adicionar exemplo de classes e objetos com herança em Java&#10;&#10;Este commit adiciona um exemplo simples de uso de herança em Java. Três classes foram criadas para representar diferentes tipos de funcionários: Gerente, Assistente e Analista. A classe Funcionario é uma classe que define os atributos básicos que todos os funcionários compartilham. As outras três classes estendem a classe Funcionario e adicionam atributos específicos de cada tipo de funcionário.&#10;&#10;Cada uma das classes implementa o método calcularBonus() de maneira diferente, com base nas regras de bônus específicas para cada tipo de funcionário. O código na classe Main instancia objetos de cada uma das classes e imprime informações sobre o estado atual dos objetos, bem como o bônus que cada um receberá com base em sua classe específica.&#10;&#10;Este exemplo serve como uma introdução simples ao uso de herança em Java e como uma demonstração de como as classes podem ser usadas para modelar objetos do mundo real com atributos e comportamentos específicos.&#10;&#10;Refs #1" />
    <MESSAGE value="Adicionar classes de Funcionario e suas subclasses em Java&#10;&#10;Este commit adiciona quatro classes em Java para representar diferentes tipos de funcionários: Funcionario (abstrata), Gerente, Assistente e Analista. A classe Funcionario é uma classe abstrata que define os atributos básicos que todos os funcionários compartilham, como nome, salário e cargo. As outras três classes estendem a classe Funcionario e adicionam atributos específicos de cada tipo de funcionário.&#10;&#10;Cada uma das classes implementa o método calcularBonus() de maneira diferente, com base nas regras de bônus específicas para cada tipo de funcionário. Esses métodos são sobrescritos nas subclasses usando a anotação @Override.&#10;&#10;Este exemplo serve como uma introdução simples ao uso de herança em Java e como uma demonstração de como as classes podem ser usadas para modelar objetos do mundo real com atributos e comportamentos específicos.&#10;&#10;Refs #1" />
    <MESSAGE value="Adicionar classe Analista em Java&#10;&#10;Este commit adiciona a classe Analista em Java, que estende a classe Funcionario e adiciona o atributo adicional &quot;area&quot;. O método calcularBonus() na classe Analista calcula o bônus com base na avaliação da área.&#10;&#10;Este exemplo serve como uma demonstração simples de como estender uma classe existente em Java e adicionar comportamentos específicos.&#10;&#10;Refs #2" />
    <option name="LAST_COMMIT_MESSAGE" value="Adicionar classe Analista em Java&#10;&#10;Este commit adiciona a classe Analista em Java, que estende a classe Funcionario e adiciona o atributo adicional &quot;area&quot;. O método calcularBonus() na classe Analista calcula o bônus com base na avaliação da área.&#10;&#10;Este exemplo serve como uma demonstração simples de como estender uma classe existente em Java e adicionar comportamentos específicos.&#10;&#10;Refs #2" />
  </component>
</project>